
.. include:: ../_header.rst

Variable properties
~~~~~~~~~~~~~~~~~~~

The `variable properties`_ are introduced by the |SceneEditor|_ to be used by the |OutlineView|_ and the `scene compiler <scene-compiler.html>`_.

Name property
`````````````

This name is auto generated by the editor: 

.. image:: ../images/scene-editor-name-prop-1-202203281224.webp
 :alt: Name property in Inspector view.

|br|

It is used as the labal in the |OutlineView|_:

.. image:: ../images/scene-editor-name-prop-2-202203281224.webp
 :alt: Name property in Outlime.

|br|
And as a variable name in the generated code:

.. image:: ../images/scene-editor-name-prop-3-202203281224.webp
  :alt: Name property in code.

|br|

Game Object Name property
`````````````````````````

The **GO Name** property indicates if the previous **Name** property's value will be set as value to the `Game Object's name property <https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.GameObject.html#name>`_.

Check the **GO Name** property:

.. image:: ../images/scene-editor-go-name-prop-3-202203281224.webp
  :alt: Enables setting the Game Object's name property.

|br|

For generating the ``name`` value in code:

.. image:: ../images/scene-editor-go-name-code-prop-3-202203281224.webp
  :alt: Set the variable name as the GO name's value.
|br|

Type property
`````````````

This property shows the type of the selected object. In the case of prefabs_, it shows the name of the prefab and the Phaser_ type that is the root of the prefab. For example: ``prefab PlayButton (Image)``.

Also, you can click on the type name to change the type of the selected objects. It opens the `Replace Type dialog <./replace-object-type.html>`_:

.. image:: ../images/scene-editor-variable-type-prop-09182020.webp
    :alt: Replace Type dialog.

Scope property
``````````````

The scope property refers to the lexical scope of the variable that references the object. The possible values are:

* ``Class``: The variable is assigned to a private class field. The object is accessible from any other method of the class.

* ``Method``: The variable is local to the method.

* ``Public``: Like the ``Class`` scope, but it is referenced by a public field. The object is accessible to any client of the class.

By default, the scope is set to ``Method``.